#include<stdio.h>
#include<stdlib.h>
int bt[10],process[10],rem_bt[10],ready_q[15],ct[10];
int n,tq;
int time=0;

void input()
{
    int i;
    printf("Enter the no. of processes\n");
    scanf("%d",&n);
    printf("Enter the Burst time for each process\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&bt[i]);
        process[i]=i+1;
        rem_bt[i]=bt[i];
        ready_q[i]=process[i];
    }
    printf("Enter the Time Quantum\n");
    scanf("%d",&tq);
}

void rotate()
{
    int temp[4],i;
    temp[0]=rem_bt[0];
    temp[1]=process[0];
    temp[2]=ready_q[0];
    //temp[3]=bt[0];
    for(i=0;i<n-1;i++)
    {
        rem_bt[i]=rem_bt[i+1];
        process[i]=process[i+1];
        ready_q[i]=ready_q[i+1];
        //bt[i]=bt[i+1];
    }
    rem_bt[n-1]=temp[0];
    process[n-1]=temp[1];
    ready_q[n-1]=temp[2];
    //bt[n-1]=temp[3];
}

void remove_executed()
{
    int i;
    for(i=0;i<n-1;i++)
    {
        rem_bt[i]=rem_bt[i+1];
        process[i]=process[i+1];
        ready_q[i]=ready_q[i+1];
        //bt[i]=bt[i+1];
    }
    n--;
}

int main()
{
    input();
    int i;
    int c=0;
    printf("Printing the order of execution of processes\n");
    while(n!=0)
    {
            printf("P%d ",process[0]);
            rem_bt[0]-=tq;
            if(rem_bt[0]>0)
            {
                rotate();
                time+=tq;
            }
            else
            {

                if(rem_bt[0]==0)
                {
                    time+=tq;
                }
                else
                {
                    time=time+(rem_bt[0]+tq);
                }
                ct[c]=time;
                c++;
                 remove_executed();
                // printf("\n** %d **\n",time);
            }
    }

    printf("\n\nPrinting completion time\n");
    for(i=0;i<n;i++)
        printf("%d  ",ct[i]);
}
